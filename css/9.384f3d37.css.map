{"version":3,"sources":["webpack:///./src/components/tools/src/components/tools/Tuner.vue"],"names":[],"mappings":";;AAsaA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AAEA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;EACA;;;;;GAKA;AACA;AAEA;EACA;AACA;AAEA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;AACA;AAEA;EACA;AACA;AAEA;EACA;AACA;AAEA;EACA;AACA;AAEA;EACA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AAEA;EACA;EACA;AACA;AAEA;EACA;EACA;AACA;AAEA;AACA;IACA;AACA;AAEA;IACA;AACA;AACA;AAEA;EACA;AACA;AAEA;EACA;EACA;EACA;AACA;AAEA;EACA;AACA","file":"css/9.384f3d37.css","sourcesContent":["<template>\n  <q-layout view=\"hHh lpR fFf\" style=\"height: 100vh\">\n    <q-header elevated>\n      <q-toolbar>\n        <q-toolbar-title class=\"text-h5 text-weight-bolder\"\n          >Chromatic Tuner</q-toolbar-title\n        >\n        <q-space />\n\n        <q-btn label=\"Back\" color=\"accent\" icon=\"close\" to=\"/tools\" />\n      </q-toolbar>\n    </q-header>\n    <q-page-container>\n      <div class=\"q-mt-xl\">\n        <canvas class=\"frequency-bars\"></canvas>\n        <div class=\"meter\">\n          <div class=\"meter-dot\"></div>\n          <div class=\"meter-pointer\"></div>\n        </div>\n        <div class=\"notes\">\n          <div class=\"notes-list\"></div>\n          <div class=\"frequency\"><span>Hz</span></div>\n        </div>\n        <div class=\"a4\">A<sub>4</sub> = <span>440</span> Hz</div>\n      </div>\n    </q-page-container>\n  </q-layout>\n</template>\n<script>\n\n\n// import { Application } from \"../../middleware/tools/tuner.js\"\nimport swal from 'sweetalert2/dist/sweetalert2.js'\nimport aubio from \"aubiojs\"\nexport const Tuner = function ( a4 ) {\n  this.middleA = a4 || 440\n  this.semitone = 69\n  this.bufferSize = 4096\n  this.noteStrings = [\n    'C',\n    'C♯',\n    'D',\n    'D♯',\n    'E',\n    'F',\n    'F♯',\n    'G',\n    'G♯',\n    'A',\n    'A♯',\n    'B'\n  ]\n\n  this.initGetUserMedia()\n}\n\nTuner.prototype.initGetUserMedia = function() {\n  window.AudioContext = window.AudioContext || window.webkitAudioContext\n  if (!window.AudioContext) {\n    return alert('AudioContext not supported')\n  }\n\n  // Older browsers might not implement mediaDevices at all, so we set an empty object first\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {}\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n      // First get ahold of the legacy getUserMedia, if present\n      const getUserMedia =\n        navigator.webkitGetUserMedia || navigator.mozGetUserMedia\n\n      // Some browsers just don't implement it - return a rejected promise with an error\n      // to keep a consistent interface\n      if (!getUserMedia) {\n        alert('getUserMedia is not implemented in this browser')\n      }\n\n      // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n      return new Promise(function(resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject)\n      })\n    }\n  }\n}\n\nTuner.prototype.startRecord = function () {\n  const self = this\n  navigator.mediaDevices\n    .getUserMedia({ audio: true })\n    .then(function(stream) {\n      self.audioContext.createMediaStreamSource(stream).connect(self.analyser)\n      self.analyser.connect(self.scriptProcessor)\n      self.scriptProcessor.connect(self.audioContext.destination)\n      self.scriptProcessor.addEventListener('audioprocess', function(event) {\n        const frequency = self.pitchDetector.do(\n          event.inputBuffer.getChannelData(0)\n        )\n        if (frequency && self.onNoteDetected) {\n          const note = self.getNote(frequency)\n          self.onNoteDetected({\n            name: self.noteStrings[note % 12],\n            value: note,\n            cents: self.getCents(frequency, note),\n            octave: parseInt(note / 12) - 1,\n            frequency: frequency\n          })\n        }\n      })\n    })\n    .catch(function(error) {\n      alert(error.name + ': ' + error.message)\n    })\n}\n\nTuner.prototype.init = function() {\n  this.audioContext = new window.AudioContext()\n  this.analyser = this.audioContext.createAnalyser()\n  this.scriptProcessor = this.audioContext.createScriptProcessor(\n    this.bufferSize,\n    1,\n    1\n  )\n\n  const self = this\n\n  aubio().then(function(aubio) {\n    self.pitchDetector = new aubio.Pitch(\n      'default',\n      self.bufferSize,\n      1,\n      self.audioContext.sampleRate\n    )\n    self.startRecord()\n  })\n}\n\n/**\n * get musical note from frequency\n *\n * @param {number} frequency\n * @returns {number}\n */\nTuner.prototype.getNote = function(frequency) {\n  const note = 12 * (Math.log(frequency / this.middleA) / Math.log(2))\n  return Math.round(note) + this.semitone\n}\n\n/**\n * get the musical note's standard frequency\n *\n * @param note\n * @returns {number}\n */\nTuner.prototype.getStandardFrequency = function(note) {\n  return this.middleA * Math.pow(2, (note - this.semitone) / 12)\n}\n\n/**\n * get cents difference between given frequency and musical note's standard frequency\n *\n * @param {number} frequency\n * @param {number} note\n * @returns {number}\n */\nTuner.prototype.getCents = function(frequency, note) {\n  return Math.floor(\n    (1200 * Math.log(frequency / this.getStandardFrequency(note))) / Math.log(2)\n  )\n}\n\n/**\n * play the musical note\n *\n * @param {number} frequency\n */\nTuner.prototype.play = function(frequency) {\n  if (!this.oscillator) {\n    this.oscillator = this.audioContext.createOscillator()\n    this.oscillator.connect(this.audioContext.destination)\n    this.oscillator.start()\n  }\n  this.oscillator.frequency.value = frequency\n}\n\nTuner.prototype.stop = function() {\n  this.oscillator.stop()\n  this.oscillator = null\n}\nexport const Notes = function ( selector, tuner ) {\n  this.tuner = tuner\n  this.isAutoMode = true\n  this.$root = document.querySelector(selector)\n  this.$notesList = this.$root.querySelector('.notes-list')\n  this.$frequency = this.$root.querySelector('.frequency')\n  this.$notes = []\n  this.$notesMap = {}\n  this.createNotes()\n}\n\nNotes.prototype.createNotes = function() {\n  const minOctave = 2\n  const maxOctave = 5\n  for (var octave = minOctave; octave <= maxOctave; octave += 1) {\n    for (var n = 0; n < 12; n += 1) {\n      const $note = document.createElement('div')\n      $note.className = 'note'\n      $note.dataset.name = this.tuner.noteStrings[n]\n      $note.dataset.value = 12 * (octave + 1) + n\n      $note.dataset.octave = octave.toString()\n      $note.dataset.frequency = this.tuner.getStandardFrequency(\n        $note.dataset.value\n      )\n      $note.innerHTML =\n        $note.dataset.name[0] +\n        '<span class=\"note-sharp\">' +\n        ($note.dataset.name[1] || '') +\n        '</span>' +\n        '<span class=\"note-octave\">' +\n        $note.dataset.octave +\n        '</span>'\n      this.$notesList.appendChild($note)\n      this.$notes.push($note)\n      this.$notesMap[$note.dataset.value] = $note\n    }\n  }\n\n  const self = this\n  this.$notes.forEach(function($note) {\n    $note.addEventListener('click', function() {\n      if (self.isAutoMode) {\n        return\n      }\n\n      const $active = self.$notesList.querySelector('.active')\n      if ($active === this) {\n        self.tuner.stop()\n        $active.classList.remove('active')\n      } else {\n        self.tuner.play(this.dataset.frequency)\n        self.update($note.dataset)\n      }\n    })\n  })\n}\n\nNotes.prototype.active = function($note) {\n  this.clearActive()\n  $note.classList.add('active')\n  this.$notesList.scrollLeft =\n    $note.offsetLeft - (this.$notesList.clientWidth - $note.clientWidth) / 2\n}\n\nNotes.prototype.clearActive = function() {\n  const $active = this.$notesList.querySelector('.active')\n  if ($active) {\n    $active.classList.remove('active')\n  }\n}\n\nNotes.prototype.update = function(note) {\n  if (note.value in this.$notesMap) {\n    this.active(this.$notesMap[note.value])\n    this.$frequency.childNodes[0].textContent = parseFloat(\n      note.frequency\n    ).toFixed(1)\n  }\n}\n\nNotes.prototype.toggleAutoMode = function() {\n  if (this.isAutoMode) {\n    this.clearActive()\n  }\n  this.isAutoMode = !this.isAutoMode\n}\n\n/**\n * @param {string} selector\n * @constructor\n */\nexport const Meter = function(selector) {\n  this.$root = document.querySelector(selector)\n  this.$pointer = this.$root.querySelector('.meter-pointer')\n  this.init()\n}\n\nMeter.prototype.init = function() {\n  for (var i = 0; i <= 10; i += 1) {\n    const $scale = document.createElement('div')\n    $scale.className = 'meter-scale'\n    $scale.style.transform = 'rotate(' + (i * 9 - 45) + 'deg)'\n    if (i % 5 === 0) {\n      $scale.classList.add('meter-scale-strong')\n    }\n    this.$root.appendChild($scale)\n  }\n}\n\n/**\n * @param {number} deg\n */\nMeter.prototype.update = function(deg) {\n  this.$pointer.style.transform = 'rotate(' + deg + 'deg)'\n}\n\n/**\n * the frequency histogram\n *\n * @param {string} selector\n * @constructor\n */\nexport const FrequencyBars = function(selector) {\n  this.$canvas = document.querySelector(selector)\n  this.$canvas.width = document.body.clientWidth\n  this.$canvas.height = document.body.clientHeight / 2\n  this.canvasContext = this.$canvas.getContext('2d')\n}\n\n/**\n * @param {Uint8Array} data\n */\nFrequencyBars.prototype.update = function(data) {\n  const length = 64 // low frequency only\n  const width = this.$canvas.width / length - 0.5\n  this.canvasContext.clearRect(0, 0, this.$canvas.width, this.$canvas.height)\n  for (var i = 0; i < length; i += 1) {\n    this.canvasContext.fillStyle = '#ecf0f1'\n    this.canvasContext.fillRect(\n      i * (width + 0.5),\n      this.$canvas.height - data[i],\n      width,\n      data[i]\n    )\n  }\n}\n\nexport const Application = function () {\n  this.initA4()\n  this.tuner = new Tuner(this.a4)\n  this.notes = new Notes('.notes', this.tuner)\n  this.meter = new Meter('.meter')\n  this.frequencyBars = new FrequencyBars('.frequency-bars')\n  this.update({ name: 'A', frequency: this.a4, octave: 4, value: 69, cents: 0 })\n}\n\nApplication.prototype.initA4 = function () {\n  this.$a4 = document.querySelector('.a4 span')\n  this.a4 = parseInt(localStorage.getItem('a4')) || 440\n  this.$a4.innerHTML = this.a4\n}\n\nApplication.prototype.start = function() {\n  const self = this\n\n  this.tuner.onNoteDetected = function(note) {\n    if (self.notes.isAutoMode) {\n      if (self.lastNote === note.name) {\n        self.update(note)\n      } else {\n        self.lastNote = note.name\n      }\n    }\n  }\n\n  swal.fire('Welcome online tuner!').then(function() {\n    self.tuner.init()\n    self.frequencyData = new Uint8Array(self.tuner.analyser.frequencyBinCount)\n  })\n\n  this.$a4.addEventListener('click', function () {\n    swal.fire({\n      input: 'number',\n      inputValue: self.a4,\n    }).then(function ({ value: a4 }) {\n      if (!parseInt(a4) || a4 === self.a4) {\n        return\n      }\n      self.a4 = a4\n      self.$a4.innerHTML = a4\n      self.tuner.middleA = a4\n      self.notes.createNotes()\n      self.update({ name: 'A', frequency: self.a4, octave: 4, value: 69, cents: 0 })\n      localStorage.setItem('a4', a4)\n    })\n  })\n\n  this.updateFrequencyBars()\n}\n\nApplication.prototype.updateFrequencyBars = function() {\n  if (this.tuner.analyser) {\n    this.tuner.analyser.getByteFrequencyData(this.frequencyData)\n    this.frequencyBars.update(this.frequencyData)\n  }\n  requestAnimationFrame(this.updateFrequencyBars.bind(this))\n}\n\nApplication.prototype.update = function(note) {\n  this.notes.update(note)\n  this.meter.update((note.cents / 50) * 45)\n}\n\n// noinspection JSUnusedGlobalSymbols\nApplication.prototype.toggleAutoMode = function() {\n  this.notes.toggleAutoMode()\n}\n\nexport default {\n  mounted(){\n\n    const app = new Application();\n    app.start()\n  }\n}\n</script>\n\n<style>\n@import \"*sweetalert2/src/sweetalert2.scss\";\nhtml {\n  height: 100%;\n}\n\nbody {\n  position: fixed;\n  font-family: sans-serif;\n  color: #2c3e50;\n  margin: 0;\n  width: 100%;\n  height: 100%;\n  cursor: default;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n}\n\n.notes {\n  margin: auto;\n  width: 400px;\n  position: fixed;\n  top: 50%;\n  left: 0;\n  right: 0;\n  text-align: center;\n}\n\n.note {\n  font-size: 90px;\n  font-weight: bold;\n  position: relative;\n  display: inline-block;\n  padding-right: 30px;\n  padding-left: 10px;\n}\n\n.note.active {\n  color: #e74c3c;\n}\n\n.notes-list {\n  overflow: auto;\n  overflow: -moz-scrollbars-none;\n  white-space: nowrap;\n  -ms-overflow-style: none;\n  -webkit-mask-image: -webkit-linear-gradient(\n    left,\n    rgba(255, 255, 255, 0),\n    #fff,\n    rgba(255, 255, 255, 0)\n  );\n}\n\n.notes-list::-webkit-scrollbar {\n  display: none;\n}\n\n.note {\n  -webkit-tap-highlight-color: transparent;\n}\n\n.note span {\n  position: absolute;\n  right: 0.25em;\n  font-size: 40%;\n  font-weight: normal;\n}\n\n.note-sharp {\n  top: 0.3em;\n}\n\n.note-octave {\n  bottom: 0.3em;\n}\n\n.frequency {\n  font-size: 32px;\n}\n\n.frequency span {\n  font-size: 50%;\n  margin-left: 0.25em;\n}\n\n.meter {\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 50%;\n  width: 400px;\n  height: 33%;\n  margin: 0 auto 5vh auto;\n}\n\n.meter-pointer {\n  width: 2px;\n  height: 100%;\n  background: #2c3e50;\n  transform: rotate(45deg);\n  transform-origin: bottom;\n  transition: transform 0.5s;\n  position: absolute;\n  right: 50%;\n}\n\n.meter-dot {\n  width: 10px;\n  height: 10px;\n  background: #2c3e50;\n  border-radius: 50%;\n  position: absolute;\n  bottom: -5px;\n  right: 50%;\n  margin-right: -4px;\n}\n\n.meter-scale {\n  width: 1px;\n  height: 100%;\n  transform-origin: bottom;\n  transition: transform 0.2s;\n  box-sizing: border-box;\n  border-top: 10px solid;\n  position: absolute;\n  right: 50%;\n}\n\n.meter-scale-strong {\n  width: 2px;\n  border-top-width: 20px;\n}\n\n.frequency-bars {\n  position: fixed;\n  bottom: 0;\n}\n\n@media (max-width: 768px) {\n  .meter {\n    width: 100%;\n  }\n\n  .notes {\n    width: 100%;\n  }\n}\n\n.swal-button {\n  background: #2c3e50;\n}\n\n.a4 {\n  position: absolute;\n  top: 16px;\n  left: 16px;\n}\n\n.a4 span {\n  color: #e74c3c;\n}\n</style>\n"],"sourceRoot":""}