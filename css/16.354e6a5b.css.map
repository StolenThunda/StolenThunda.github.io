{"version":3,"sources":["webpack:///./src/components/watch/player/src/components/watch/player/Wrapper.vue"],"names":[],"mappings":";AAwEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA;;;;;;;;;;;;;GAaA","file":"css/16.354e6a5b.css","sourcesContent":["<template>\n  <q-page class=\"media-container\">\n    <!-- Type: {{ mediaType }} -->\n    <div\n      v-if=\"mediaType === 'html'\"\n      v-html=\"ProPlayer.theSegment.getHTMLContent().replaceAll('h2', 'h5')\"\n    />\n\n    <soundslice-renderer\n      v-else-if=\"mediaType === 'soundslice'\"\n      :src=\"currentSetup.data\"\n    />\n    <template v-if=\"renderers.includes(currentSetup.mediaType)\">\n      <pdf-renderer v-if=\"s.type === 'pdf'\" :src=\"s.src\" />\n    </template>\n    <div\n      v-else-if=\"currentSetup.sources\"\n      class=\"media-container\"\n      id=\"mediaPlayerWrapper\"\n      :set=\"(s = currentSetup.sources[0])\"\n    >\n      <media-player\n        v-bind=\"currentSetup\"\n        :key=\"'mediaPlayer-' + componentKey\"\n        :src=\"s.src\"\n      />\n    </div>\n  </q-page>\n</template>\n\n<script>\nimport { mapState, mapActions } from \"vuex\";\n// import SoundSlice from './renderers/SoundSlice.vue';\nexport default {\n  name: \"MediaPlayerWrapper\",\n  components: {\n    \"pdf-renderer\": () => import(/* webpackChunkName: \"watch-player\" */\"components/watch/renderers/PDF.vue\"),\n    \"soundslice-renderer\": () =>\n      import(/* webpackChunkName: \"watch-player\" */\"components/watch/renderers/SoundSlice.vue\"),\n    \"media-player\": () => import(/* webpackChunkName: \"watch-player\" */\"src/components/watch/player/MediaPlayer.vue\")\n  },\n  data: () => ({\n    componentKey: 0,\n    renderers: [\"pdf\"]\n  }),\n  created() {\n    this.$root.$on(\"flip-player\", this.flipper);\n  },\n  mounted() {\n    this.openSegment(this.$route.params.segmentID);\n  },\n  computed: {\n    mediaType() {\n      return this.ProPlayer.theSegment.getPrimaryMediaType();\n    },\n    ...mapState(\"watch\", [\"currentSetup\", \"ProPlayer\"])\n  },\n  watch: {\n    currentSetup() {\n      // console.info(\"setup changed\", this.currentSetup);\n      this.forceRerender();\n    }\n  },\n  methods: {\n    ...mapActions(\"watch\", [\"openSegment\"]),\n    forceRerender() {\n      this.componentKey += 1;\n    }\n  }\n};\n</script>\n<style>\n #mediaPlayerWrappers {\n  /* bottom: 0; */\n  /* position: absolute; */\n  top: 0;\n  left: 0;\n  right: 0;\n  overflow: hidden;\n  border: none;\n  padding: 0;\n  margin: 0;\n}\n.media-content-wrapper {\n  /* position: absolute; */\n  top: 0;\n  left: 0;\n  width: 100%;\n  /* bottom: 0; */\n  /* padding: 1rem; */\n  background: #222;\n  /* overflow: auto; */\n}\n/*\n#mediaPlayer iframe {\n  height: 100%;\n  width: 100%;\n   bottom: 0; \n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  overflow: hidden; \n  border: none;\n  padding: 0;\n  margin: 0;\n} */\n</style>\n"],"sourceRoot":""}